package ui

import (
	"github.com/gofs-cli/template/internal/ui/components/modal"
	"github.com/gofs-cli/template/internal/ui/components/toast"
	"github.com/gofs-cli/template/internal/ui/pages/validation"
)

templ Index() {
	<!DOCTYPE html>
	<html lang="en">
		<meta charset="UTF-8"/>
		<title>gofs</title>
		<meta name="viewport" content="width=device-width,initial-scale=1"/>
		<link rel="stylesheet" href="/assets/css/styles.css"/>
		<!-- HTMX Core -->
		<script defer src="/assets/js/htmx.min.js"></script>
		<!-- HTMX Plugins -->
		<script defer src="/assets/js/response-targets.js"></script>
		<!-- Alpine Plugins -->
		<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.x.x/dist/cdn.min.js"></script>
		<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js"></script>
		<!-- Alpine Core -->
		<script defer src="/assets/js/alpine.js"></script>
		// We are using htmx-extensions to handle response targets so that we can use the hx-target-error attribute to display error messages
		// when an API request fails. This is a more declarative way to handle errors than using JavaScript.
		// https://github.com/bigskysoftware/htmx-extensions/blob/main/src/response-targets/README.md
		<body hx-ext="response-targets" hx-target-error="this">
			// FF FOUC fix
			<script>0</script>
			@toast.Container()
			<main>
				<h1>gofs</h1>
				<label>
					<h2>Demo: Modal</h2>
					<button
						hx-get="/modal"
						hx-target="main"
						hx-swap="afterbegin"
					>Open Modal</button>
				</label>
				<div>
					<h2>Demo: Toast</h2>
					<div>
						<button
							hx-get="/toast-success"
							hx-swap="none"
						>
							Success Toast
						</button>
						<button
							hx-get="/toast-info"
							hx-swap="none"
						>
							Info Toast
						</button>
						<button
							hx-get="/toast-warning"
							hx-swap="none"
						>
							Warning Toast
						</button>
						<button
							hx-get="/toast-error"
							hx-swap="none"
						>
							Error Toast
						</button>
					</div>
				</div>
				@validation.TextInput()
			</main>
		</body>
	</html>
}

templ ModalDemo() {
	@modal.Modal() {
		<div>
			<h2>Demo Modal</h2>
			<p>Modal content</p>
			<button @click="close">
				Close
			</button>
		</div>
	}
}
