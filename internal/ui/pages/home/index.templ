package home

import (
	"github.com/gofs-cli/template/internal/ui/components/modal"
	"github.com/gofs-cli/template/internal/ui/components/toast"
	"github.com/gofs-cli/template/internal/ui/pages/validation"
)

css classLayout() {
	display: grid;
}

templ layout(header, body templ.Component) {
	@toast.Container()
	<main class={ classLayout() }>
		<div>
			@header
		</div>
		<div>
			@body
		</div>
	</main>
}

templ body() {
	Welcome to the sample application! This application demonstrates how to use htmx with Go. The following examples are based on the htmx examples:
	<a href="https://htmx.org/examples/">https://htmx.org/examples/</a>
	<ul hx-boost="true">
		<li>
			<a href="/click-to-edit">Click to Edit</a>
		</li>
		<li>
			<a href="/bulk-update">Bulk Update</a>
		</li>
		<li>
			<a href="/click-to-load">Click To Load</a>
		</li>
		<li>
			<a href="/delete-row">Delete Row</a>
		</li>
		<li>
			<a href="/edit-row">Edit Row</a>
		</li>
		<li>
			<a href="/lazy-loading">Lazy Loading</a>
		</li>
		<li>
			<a href="/inline-validation">Inline Validation</a>
		</li>
		<li>
			<a href="/infinite-scroll">Infinite Scroll</a>
		</li>
		<li>
			<a href="/active-search">Active Search</a>
		</li>
		<li>
			<a href="/progress-bar">Progress Bar</a>
		</li>
		<li>
			<a href="/value-select">Value Select</a>
		</li>
		<li>
			<a href="/animations">Animations</a>
		</li>
		<li>
			<a href="/file-upload">File Upload</a>
		</li>
		<li>
			<a href="/preserving-file-inputs-after-form-errors">Preserving File Inputs after Form Errors</a>
		</li>
		<li>
			<a href="/reset-user-input">Reset User Input</a>
		</li>
		<li>
			<a href="/dialogs-browser">Dialogs - Browser</a>
		</li>
		<li>
			<a href="/dialogs-uikit">Dialogs - UIKit</a>
		</li>
		<li>
			<a href="/dialogs-bootstrap">Dialogs - Bootstrap</a>
		</li>
		<li>
			<a href="/dialogs-custom">Dialogs - Custom</a>
		</li>
		<li>
			<a href="/tabs-using-hateoas">Tabs (Using HATEOAS)</a>
		</li>
		<li>
			<a href="/tabs-using-javascript">Tabs (Using JavaScript)</a>
		</li>
		<li>
			<a href="/keyboard-shortcuts">Keyboard Shortcuts</a>
		</li>
		<li>
			<a href="/drag-drop-sortable">Drag & Drop / Sortable</a>
		</li>
		<li>
			<a href="/updating-other-content">Updating Other Content</a>
		</li>
		<li>
			<a href="/confirm">Confirm</a>
		</li>
		<li>
			<a href="/async-authentication">Async Authentication</a>
		</li>
		<li>
			<a href="/web-components">Web Components</a>
		</li>
		<li>
			<a href="/movebefore-powered-hx-preserve">moveBefore()-powered hx-preserve</a>
		</li>
	</ul>
	<h1>Home</h1>
	<label>
		<h2>Demo: Modal</h2>
		<button
			hx-get="/modal"
			hx-target="main"
			hx-swap="afterbegin"
		>Open Modal</button>
	</label>
	<div>
		<h2>Demo: Toast</h2>
		<div>
			<button
				hx-get="/toast-success"
				hx-swap="none"
			>
				Success Toast
			</button>
			<button
				hx-get="/toast-info"
				hx-swap="none"
			>
				Info Toast
			</button>
			<button
				hx-get="/toast-warning"
				hx-swap="none"
			>
				Warning Toast
			</button>
			<button
				hx-get="/toast-error"
				hx-swap="none"
			>
				Error Toast
			</button>
		</div>
	</div>
	@validation.TextInput()
}

templ ModalDemo() {
	@modal.Modal() {
		<div>
			<h2>Demo Modal</h2>
			<p>Modal content</p>
			<button @click="close">
				Close
			</button>
		</div>
	}
}
